#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Pagerank
\end_layout

\begin_layout Author
Nicolas Chenciner & David Bühler
\end_layout

\begin_layout Section
Utilisation
\end_layout

\begin_layout Paragraph
Compilation
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Un makefile est fourni :
\end_layout

\begin_layout Quotation
$ make
\end_layout

\begin_layout Paragraph
Exécution :
\end_layout

\begin_layout Quotation
$ ./pagerank file [zap count epsilon z]
\end_layout

\begin_layout Paragraph
Options :
\end_layout

\begin_layout Itemize
file : nom du fichier contenant la description du graphe.
\end_layout

\begin_layout Itemize
zap : facteur zap (flottant) ; 0 par défaut.
\end_layout

\begin_layout Itemize
count : nombre maximum d'itérations de l'algorithme ; 0 par défaut.
\end_layout

\begin_layout Itemize
epsilon : distance maximale entre deux vecteurs successifs calculés par
 l'algorithme ; 0 par défaut.
\end_layout

\begin_layout Itemize
z : facteur influant sur le vecteur initial utilisé par l'algorithme :
\end_layout

\begin_deeper
\begin_layout Itemize
si z est négatif, le vecteur initial est le vecteur 
\begin_inset Quotes fld
\end_inset

uniforme
\begin_inset Quotes frd
\end_inset

 dont chaque élément vaut 
\begin_inset Formula $1/\mathtt{length}$
\end_inset

 (comportement par défaut).
\end_layout

\begin_layout Itemize
si z est positif, le vecteur initial est le vecteur 
\begin_inset Formula $v$
\end_inset

 tel que 
\begin_inset Formula $v[z]=1$
\end_inset

 et 
\begin_inset Formula $\forall i\neq z,v[i]=0$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Paragraph
Format de fichier
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Les graphes sont décrits par des fichiers placés dans le répertoire 
\family typewriter
examples/
\family default
 tels que :
\end_layout

\begin_layout Itemize
les lignes vides ou commencant par le caractère # sont ignorées ;
\end_layout

\begin_layout Itemize
les autres lignes doivent être de la forme 
\begin_inset Quotes fld
\end_inset

i j
\begin_inset Quotes frd
\end_inset

, symbolisant un arc du sommet 
\begin_inset Formula $i$
\end_inset

 vers le sommet 
\begin_inset Formula $j$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Explication de code
\end_layout

\begin_layout Subsection
Découpage des classes
\end_layout

\begin_layout Paragraph
Vect<T>
\end_layout

\begin_layout Standard
Classe paramétrée représentant un vecteur de type T ; plusieurs constructeurs
 permettent d'initialiser facilement un vecteur, à partir d'une liste, d'un
 tableau ou d'une valeur par défaut.
\end_layout

\begin_layout Paragraph
FVect
\end_layout

\begin_layout Standard
Vecteur de type float ; dispose des opérations d'addition et de multiplication
 par une constante, ainsi que du calcul de la norme entre deux vecteurs.
\end_layout

\begin_layout Paragraph
Matrix<T>
\end_layout

\begin_layout Standard
Matrice de type T, dans le format décrit par l'énoncé, avec les méthodes
 permettant d'accéder aux valeurs ou de les modifier.
\end_layout

\begin_layout Paragraph
FMatrix
\end_layout

\begin_layout Standard
Matrice de type float ; dispose des opérations de multiplication et de multiplic
ation 
\begin_inset Quotes fld
\end_inset

transposée
\begin_inset Quotes frd
\end_inset

 par un 
\family typewriter
FVect
\family default
.
\end_layout

\begin_layout Paragraph
Graph
\end_layout

\begin_layout Standard
Représentation d'un graphe, sous forme de hashmap.
 La méthode 
\family typewriter
stoch
\family default
 calcule la matrice stochastique associée de manière optimale.
 Contient également la méthode statique 
\family typewriter
zapPagerank
\family default
.
\end_layout

\begin_layout Paragraph
GraphParser
\end_layout

\begin_layout Standard
Lecture d'un fichier et construction du graphe associé.
\end_layout

\begin_layout Paragraph
Test
\end_layout

\begin_layout Standard
Exécution d'un test : construction du graphe à partir d'un fichier, calcul
 de la matrice stochastique, exécution de l'algorithme 
\emph on
pagerank
\emph default
 avec les paramètres donnés, affichage des résultats.
\end_layout

\begin_layout Paragraph
MainTest
\end_layout

\begin_layout Standard
Main, parsing des arguments, exécution du test.
\end_layout

\begin_layout Section
Complexité
\end_layout

\begin_layout Subsection
Multiplication d'une matrice par un vecteur
\end_layout

\begin_layout Standard
La méthode mult_naive effectue un appel à get pour chaque élément du tableau
 selon un parcours des lignes et des colonnes ; get étant de complexité
 
\begin_inset Formula $O(n)$
\end_inset

 (potentiellement une opération par colonne), elle opère donc en 
\begin_inset Formula $O(n^{3})$
\end_inset

, où 
\begin_inset Formula $n$
\end_inset

 est la longueur de la matrice carrée.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La méthode mult est nettement plus efficace, puisqu'elle ne considère que
 les éléments non nuls de la matrice en cherchant directement dans les trois
 tableaux de la structure : elle effectue
\end_layout

\begin_layout Itemize
deux accès au tableau L pour chaque ligne ;
\end_layout

\begin_layout Itemize
pour chaque élément non nul, un accès à I, un accès à C, une multiplication
 et une addition.
\end_layout

\begin_layout Standard
Soit un nombre fixe d'opérations pour chaque ligne et chaque élément non
 nul.
\end_layout

\begin_layout Standard
Ce calcul est donc en 
\begin_inset Formula $O(n+m)$
\end_inset

 où 
\begin_inset Formula $n$
\end_inset

 est le nombre de lignes de la matrice et 
\begin_inset Formula $m$
\end_inset

 le nombre d'éléments non nul.
\end_layout

\begin_layout Subsection
Multiplication de la transposée d'une matrice par un vecteur
\end_layout

\begin_layout Section
Résultats et interprétation
\end_layout

\begin_layout Section
Performance
\end_layout

\end_body
\end_document
